{"version":3,"sources":["logo.svg","serviceWorkerUtility.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PushNotificationWorker","requestNotificationPermission","a","window","Notification","requestPermission","permission","Error","showLocalNotification","title","body","swRegistration","console","log","Home","navigator","serviceWorker","register","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","ready","then","registration","unregister","catch","error","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,uKC0C9BC,EAAyB,CACpCC,8BAvBiC,uCAAG,4BAAAC,EAAA,sEACXC,OAAOC,aAAaC,oBADT,UAMjB,aALbC,EAD8B,8BAO5B,IAAIC,MAAM,2CAPkB,gCAS7BD,GAT6B,2CAAH,qDAwBjCE,sBAZ4B,SAACC,EAAOC,EAAMC,GAK1CC,QAAQC,IAAIF,KCnCOG,E,kTAEYC,UAAUC,cAAcC,SAAS,0B,cAAxDN,E,gBACmBX,EAAuBC,gC,cAChDW,QAAQC,IAAIF,GACZX,EAAuBQ,sBAAsB,gBAAiB,sBAAuBG,G,gIAGrF,OACE,6BACE,8C,GAV0BO,aCUnBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBd,WACrBA,UAAUC,cAAcc,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.5844a25c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* export default function checkWorker() {\r\n  if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function () {\r\n      navigator.serviceWorker.register('service-worker-push.js').then(function (registration) {\r\n        console.log('Worker registration is successful', registration.scope);\r\n        return registration;\r\n      }, function (err) {\r\n        console.log('Worker registration has failed', err);\r\n        return false\r\n      }).catch(function (err) {\r\n        console.log(err);\r\n        return false\r\n      });\r\n    });\r\n  } else {\r\n    console.log('Service Worker is not supported by your browser.');\r\n    return false\r\n  }\r\n}*/\r\n\r\nconst requestNotificationPermission = async () => {\r\n  const permission = await window.Notification.requestPermission();\r\n  // value of permission can be 'granted', 'default', 'denied'\r\n  // granted: user has accepted the request\r\n  // default: user has dismissed the notification permission popup by clicking on x\r\n  // denied: user has denied the request.\r\n  if (permission !== 'granted') {\r\n    throw new Error('Permission not granted for Notification');\r\n  }\r\n  return permission\r\n}\r\n\r\nconst showLocalNotification = (title, body, swRegistration) => {\r\n  const options = {\r\n    body,\r\n    // here you can add more properties like icon, image, vibrate, etc.\r\n  };\r\n  console.log(swRegistration)\r\n  // swRegistration.showNotification(title, options);\r\n}\r\n\r\n\r\nexport const PushNotificationWorker = {\r\n  requestNotificationPermission,\r\n  showLocalNotification\r\n}","import React, { Component } from 'react'\r\nimport { PushNotificationWorker } from '../serviceWorkerUtility'\r\nexport default class Home extends Component {\r\n  async componentDidMount() {\r\n    const swRegistration = await navigator.serviceWorker.register('service-worker-push.js')\r\n    const permission = await PushNotificationWorker.requestNotificationPermission()\r\n    console.log(swRegistration)\r\n    PushNotificationWorker.showLocalNotification('This is title', 'this is the message', swRegistration);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Home page</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}